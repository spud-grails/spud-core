buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
		jcenter()
        maven { url "http://nexus.bertramlabs.com/content/repositories/snapshots" }
        maven { url "http://nexus.bertramlabs.com/content/repositories/releases" }
        maven { url "http://nexus.bertramlabs.com/content/repositories/publicReleases" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:${assetPipelineVersion}"
		classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
		classpath "com.craigburke.gradle:client-dependencies:1.4.1"
		classpath "com.bertramlabs.plugins:coffee-asset-pipeline:${assetPipelineVersion}"
    }
}

version project.appVersion
group "spud.core"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-plugin-publish"
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"
apply plugin:"com.craigburke.client-dependencies"

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "http://nexus.bertramlabs.com/content/repositories/snapshots" }
    maven { url "http://nexus.bertramlabs.com/content/repositories/releases" }
    maven { url "http://nexus.bertramlabs.com/content/repositories/publicReleases" }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
	compile "com.github.jknack:handlebars:4.1.0"
	compile "org.grails.plugins:hibernate5"
	compile "org.hibernate:hibernate-core:5.1.5.Final"
	compile "org.hibernate:hibernate-ehcache:5.1.5.Final"
	compile "org.grails:grails-datastore-rest-client"
	compile "com.bertramlabs.plugins:retina-tag:3.0.0"
	compile "com.bertramlabs.plugins:sitemaps:3.0.0"
	compile "org.apache.ant:ant:${antVersion}"

	assets "com.bertramlabs.plugins:coffee-asset-pipeline:${assetPipelineVersion}"

	console "org.grails:grails-console"

    profile "org.grails.profiles:web-plugin"

	provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"

	runtime "com.bertramlabs.plugins:asset-pipeline-grails:${assetPipelineVersion}"
	runtime "com.bertramlabs.plugins:security-bridge:3.0.0"

    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"

    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
}

grailsPublish {
    // TODO: Provide values here
    user = 'user'
    key = 'key'
    githubSlug = 'foo/bar'
    license {
        name = 'Apache-2.0'
    }
    title = "Spud Core"
    desc = "Spud Admin is a dependency package that adds a nice looking administrative panel to any project you add it to. It supports easy grails app integration and provides core functionality for spud modules."
    developers = [destes:"David Estes", wchu:"William Chu"]
    portalUser = ""
    portalPassword = ""    
}

assets {
    packagePlugin = true
}

clientDependencies {
	installDir = 'grails-app/assets/vendor/spud/core'

	bower {
		'bootstrap'('3.1.1', exclude: 'jquery')
		'jquery-ui'('1.9.1')
		'codemirror'('4.1.0')
		'tinymce-dist'('4.8.1')
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = gradleWrapperVersion
}

publishing {
	repositories {
		maven {
			credentials {
				if (project.hasProperty("labsNexusUser")) {
					username = labsNexusUser
				}
				if (project.hasProperty("labsNexusPassword")) {
					password = labsNexusPassword
				}
			}
			def releasesRepoUrl = "http://nexus.bertramlabs.com/content/repositories/releases"
			def snapshotsRepoUrl = "http://nexus.bertramlabs.com/content/repositories/snapshots"
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
		}
	}
}
